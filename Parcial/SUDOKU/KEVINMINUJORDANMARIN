import java.io.*;
import java.util.Random;
import java.util.Scanner;

public class Sudoku {
    private int[][] board;
    private static final int SIZE = 9;
    private static final String SAVE_FILE = "sudoku_save.txt";
    private static final int MIN_VALUES = 9;
    private static final int MAX_VALUES = 21;

    // Constructor para inicializar el tablero
    public Sudoku() {
        board = new int[SIZE][SIZE];
    }

    // Inicializar el tablero con ceros
    private void initializeBoard() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                board[i][j] = 0;
            }
        }
    }

    // Rellenar el tablero con algunos valores fijos al inicio
    private void fillBoard(int fixedCells) {
        Random rand = new Random();
        int count = 0;
        while (count < fixedCells) {
            int row = rand.nextInt(SIZE);
            int col = rand.nextInt(SIZE);
            int value = rand.nextInt(SIZE) + 1;
            if (board[row][col] == 0 && isValidPlacement(row, col, value)) {
                board[row][col] = value;
                count++;
            }
        }
    }

    // Método para mostrar el tablero con numeración de filas y columnas
    public void printBoard() {
        System.out.println("   0 1 2 | 3 4 5 | 6 7 8");
        System.out.println("  -----------------------");
        for (int i = 0; i < SIZE; i++) {
            System.out.print(i + " ");
            for (int j = 0; j < SIZE; j++) {
                if (j % 3 == 0 && j != 0) {
                    System.out.print("| ");
                }
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
            if (i % 3 == 2) {
                System.out.println("  ---------------------");
            }
        }
    }

    // Método para establecer un valor en una celda
    public boolean setCell(int row, int col, int value) {
        if (row >= 0 && row < SIZE && col >= 0 && col < SIZE && value >= 1 && value <= SIZE) {
            if (isValidPlacement(row, col, value)) {
                board[row][col] = value;
                checkCompletion(row, col);
                return true;
            } else {
                return false;
            }
        } else {
            System.out.println("Valor o posición fuera de rango.");
            return false;
        }
    }

    // Verificar si el valor se puede colocar en la celda dada
    private boolean isValidPlacement(int row, int col, int value) {
        if (!isValidRow(row, value)) {
            System.out.println("El valor ya existe en la fila " + row);
            return false;
        }
        if (!isValidColumn(col, value)) {
            System.out.println("El valor ya existe en la columna " + col);
            return false;
        }
        if (!isValidSubgrid(row, col, value)) {
            System.out.println("El valor ya existe en el subcuadrícula 3x3 correspondiente.");
            return false;
        }
        return true;
    }

    // Verificar filas
    private boolean isValidRow(int row, int value) {
        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] == value) {
                return false;
            }
        }
        return true;
    }

    // Verificar columnas
    private boolean isValidColumn(int col, int value) {
        for (int i = 0; i < SIZE; i++) {
            if (board[i][col] == value) {
                return false;
            }
        }
        return true;
    }

    // Verificar subcuadrícula 3x3
    private boolean isValidSubgrid(int row, int col, int value) {
        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;
        for (int i = startRow; i < startRow + 3; i++) {
            for (int j = startCol; j < startCol + 3; j++) {
                if (board[i][j] == value) {
                    return false;
                }
            }
        }
        return true;
    }

    // Método para verificar y notificar si se ha completado una fila, columna o subcuadro
    private void checkCompletion(int row, int col) {
        if (isRowComplete(row)) {
            System.out.println("¡Fila " + row + " completada!");
        }
        if (isColumnComplete(col)) {
            System.out.println("¡Columna " + col + " completada!");
        }
        if (isSubgridComplete(row, col)) {
            System.out.println("¡Cuadro 3x3 completado!");
        }
    }

    // Verificar si una fila está completa
    private boolean isRowComplete(int row) {
        for (int j = 0; j < SIZE; j++) {
            if (board[row][j] == 0) {
                return false;
            }
        }
        return true;
    }

    // Verificar si una columna está completa
    private boolean isColumnComplete(int col) {
        for (int i = 0; i < SIZE; i++) {
            if (board[i][col] == 0) {
                return false;
            }
        }
        return true;
    }

    // Verificar si un subcuadro 3x3 está completo
    private boolean isSubgridComplete(int row, int col) {
        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;
        for (int i = startRow; i < startRow + 3; i++) {
            for (int j = startCol; j < startCol + 3; j++) {
                if (board[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }

    // Método para guardar el estado del tablero en un archivo de texto
    private void saveBoard() {
        try (PrintWriter out = new PrintWriter(new FileWriter(SAVE_FILE))) {
            for (int i = 0; i < SIZE; i++) {
                for (int j = 0; j < SIZE; j++) {
                    out.print(board[i][j] + " ");
                }
                out.println();
            }
            System.out.println("Tablero guardado en " + SAVE_FILE);
        } catch (IOException e) {
            System.out.println("Error al guardar el tablero: " + e.getMessage());
        }
    }

    // Método para cargar el estado del tablero desde un archivo de texto
    private void loadBoard() {
        try (BufferedReader in = new BufferedReader(new FileReader(SAVE_FILE))) {
            for (int i = 0; i < SIZE; i++) {
                String[] line = in.readLine().split(" ");
                for (int j = 0; j < SIZE; j++) {
                    board[i][j] = Integer.parseInt(line[j]);
                }
            }
            System.out.println("Tablero cargado desde " + SAVE_FILE);
        } catch (IOException e) {
            System.out.println("Error al cargar el tablero: " + e.getMessage());
        }
    }

    // Menú principal
    private void menu() {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Empezar con el tablero vacío");
            System.out.println("2. Empezar con valores fijos (9 a 21)");
            System.out.println("3. Cargar partida guardada");
            System.out.println("4. Guardar partida actual");
            System.out.println("5. Salir");
            System.out.print("Seleccione una opción: ");
            int option = -1;

            try {
                option = scanner.nextInt();
            } catch (Exception e) {
                System.out.println("Entrada inválida. Por favor, ingrese un número entero.");
                scanner.next(); // Limpiar el input inválido
                continue;
            }

            switch (option) {
                case 1:
                    initializeBoard();
                    break;
                case 2:
                    initializeBoard();
                    int fixedCells = 0;
                    boolean validInput = false;

                    // Ciclo para asegurarse de que el usuario ingrese un valor válido
                    while (!validInput) {
                        System.out.print("Ingrese la cantidad de celdas fijas que desea (entre " + MIN_VALUES + " y " + MAX_VALUES + "): ");
                        try {
                            fixedCells = scanner.nextInt();
                            if (fixedCells >= MIN_VALUES && fixedCells <= MAX_VALUES) {
                                validInput = true; // Entrada válida
                            } else {
                                System.out.println("Por favor, ingrese un valor entre " + MIN_VALUES + " y " + MAX_VALUES + ".");
                            }
                        } catch (Exception e) {
                            System.out.println("Entrada inválida. Por favor, ingrese un número entero.");
                            scanner.next(); // Limpiar el input inválido
                        }
                    }
                    fillBoard(fixedCells);
                    break;
                case 3:
                    loadBoard();
                    break;
                case 4:
                    saveBoard();
                    break;
                case 5:
                    System.out.println("Saliendo...");
                    return;
                default:
                    System.out.println("Opción no válida. Por favor, seleccione una opción del 1 al 5.");
                    break;
            }

            boolean continueInput = true;
            while (continueInput) {
                System.out.println();
                System.out.println("Tablero actual:");
                printBoard();

                int row = -1, col = -1, value = -1;
                boolean validRow = false, validCol = false, validValue = false;

                // Solicitar fila
                while (!validRow) {
                    System.out.print("Ingrese la fila (0-8): ");
                    try {
                        row = scanner.nextInt();
                        if (row >= 0 && row < SIZE) {
                            validRow = true;
                        } else {
                            System.out.println("Fila inválida. Ingrese un valor entre 0 y 8.");
                        }
                    } catch (Exception e) {
                        System.out.println("Entrada inválida. Por favor, ingrese un número entero para la fila.");
                        scanner.next(); // Limpiar el input inválido
                    }
                }

                // Solicitar columna
                while (!validCol) {
                    System.out.print("Ingrese la columna (0-8): ");
                    try {
                        col = scanner.nextInt();
                        if (col >= 0 && col < SIZE) {
                            validCol = true;
                        } else {
                            System.out.println("Columna inválida. Ingrese un valor entre 0 y 8.");
                        }
                    } catch (Exception e) {
                        System.out.println("Entrada inválida. Por favor, ingrese un número entero para la columna.");
                        scanner.next(); // Limpiar el input inválido
                    }
                }

                // Solicitar valor
                while (!validValue) {
                    System.out.print("Ingrese el valor (1-9): ");
                    try {
                        value = scanner.nextInt();
                        if (value >= 1 && value <= SIZE) {
                            validValue = true;
                        } else {
                            System.out.println("Valor inválido. Ingrese un número entre 1 y 9.");
                        }
                    } catch (Exception e) {
                        System.out.println("Entrada inválida. Por favor, ingrese un número entero para el valor.");
                        scanner.next(); // Limpiar el input inválido
                    }
                }

                boolean result = setCell(row, col, value);
                if (result) {
                    System.out.println("Valor colocado correctamente.");
                } else {
                    System.out.println("No se pudo colocar el valor.");
                }

                // Preguntar si el usuario quiere seguir ingresando valores
                System.out.print("¿Desea ingresar otro valor? (s/n): ");
                String response = scanner.next();
                if (response.equalsIgnoreCase("n")) {
                    continueInput = false;
                }
            }
        }
    }

    // Método principal
    public static void main(String[] args) {
        Sudoku sudoku = new Sudoku();
        sudoku.menu();
    }
}
